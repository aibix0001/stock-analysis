version: '3.8'

services:
  # ===============================================================================
  # Infrastructure Services
  # ===============================================================================
  
  # PostgreSQL Event-Store
  postgres:
    image: postgres:15-alpine
    container_name: aktienanalyse-postgres
    environment:
      POSTGRES_DB: aktienanalyse_event_store
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./shared/database/event-store-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./shared/database/seed-data.sql:/docker-entrypoint-initdb.d/02-seed.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - aktienanalyse-network

  # Redis Event-Bus Cluster (3 Nodes)
  redis-master:
    image: redis:7-alpine
    container_name: aktienanalyse-redis-master
    command: redis-server --appendonly yes --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000
    volumes:
      - redis_master_data:/data
    ports:
      - "6379:6379"
      - "16379:16379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - aktienanalyse-network

  redis-slave1:
    image: redis:7-alpine
    container_name: aktienanalyse-redis-slave1
    command: redis-server --appendonly yes --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000
    volumes:
      - redis_slave1_data:/data
    ports:
      - "6380:6379"
      - "16380:16379"
    depends_on:
      - redis-master
    restart: unless-stopped
    networks:
      - aktienanalyse-network

  redis-slave2:
    image: redis:7-alpine
    container_name: aktienanalyse-redis-slave2
    command: redis-server --appendonly yes --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000
    volumes:
      - redis_slave2_data:/data
    ports:
      - "6381:6379"
      - "16381:16379"
    depends_on:
      - redis-master
    restart: unless-stopped
    networks:
      - aktienanalyse-network

  # ===============================================================================
  # Core Services (Event-Driven Architecture)
  # ===============================================================================

  # Intelligent Core Service (Unified Analysis + Performance + Intelligence)
  intelligent-core-service:
    build:
      context: ./services/intelligent-core-service
      dockerfile: Dockerfile
    container_name: intelligent-core-service
    environment:
      - NODE_ENV=production
      - POSTGRES_URL=postgresql://postgres:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/aktienanalyse_event_store
      - REDIS_CLUSTER_NODES=redis-master:6379,redis-slave1:6380,redis-slave2:6381
      - EVENT_BUS_URL=redis://redis-master:6379
      - LOG_LEVEL=info
      - SERVICE_NAME=intelligent-core-service
    volumes:
      - ./shared/config:/app/config:ro
      - ./shared/event-schemas:/app/schemas:ro
      - intelligent_core_logs:/app/logs
    ports:
      - "8001:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - aktienanalyse-network

  # Broker Gateway Service (Trading Logic)
  broker-gateway-service:
    build:
      context: ./services/broker-gateway-service
      dockerfile: Dockerfile
    container_name: broker-gateway-service
    environment:
      - NODE_ENV=production
      - BITPANDA_API_KEY=${BITPANDA_API_KEY}
      - BITPANDA_API_SECRET=${BITPANDA_API_SECRET}
      - BITPANDA_BASE_URL=https://api.exchange.bitpanda.com
      - REDIS_CLUSTER_NODES=redis-master:6379,redis-slave1:6380,redis-slave2:6381
      - EVENT_BUS_URL=redis://redis-master:6379
      - LOG_LEVEL=info
      - SERVICE_NAME=broker-gateway-service
    volumes:
      - ./shared/config:/app/config:ro
      - ./shared/event-schemas:/app/schemas:ro
      - broker_gateway_logs:/app/logs
    ports:
      - "8002:8000"
    depends_on:
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - aktienanalyse-network

  # Event-Bus Service (Redis Management + Routing)
  event-bus-service:
    build:
      context: ./services/event-bus-service
      dockerfile: Dockerfile
    container_name: event-bus-service
    environment:
      - NODE_ENV=production
      - REDIS_CLUSTER_NODES=redis-master:6379,redis-slave1:6380,redis-slave2:6381
      - EVENT_ANALYTICS_ENABLED=true
      - DEAD_LETTER_QUEUE_ENABLED=true
      - LOG_LEVEL=info
      - SERVICE_NAME=event-bus-service
    volumes:
      - ./shared/config:/app/config:ro
      - ./shared/event-schemas:/app/schemas:ro
      - event_bus_logs:/app/logs
    ports:
      - "8003:8000"
    depends_on:
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - aktienanalyse-network

  # Frontend Service (React Event-driven UI)
  frontend-service:
    build:
      context: ./services/frontend-service
      dockerfile: Dockerfile
    container_name: frontend-service
    environment:
      - NODE_ENV=production
      - REACT_APP_API_BASE_URL=http://localhost:8001
      - REACT_APP_WEBSOCKET_URL=ws://localhost:8003/events/stream
      - REACT_APP_SERVICE_NAME=frontend-service
    volumes:
      - ./shared/config:/app/config:ro
      - frontend_logs:/app/logs
    ports:
      - "3000:3000"
    depends_on:
      - intelligent-core-service
      - event-bus-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - aktienanalyse-network

  # Monitoring Service (Analytics & Health)
  monitoring-service:
    build:
      context: ./services/monitoring-service
      dockerfile: Dockerfile
    container_name: monitoring-service
    environment:
      - NODE_ENV=production
      - POSTGRES_URL=postgresql://postgres:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/aktienanalyse_event_store
      - REDIS_CLUSTER_NODES=redis-master:6379,redis-slave1:6380,redis-slave2:6381
      - PROMETHEUS_ENABLED=true
      - GRAFANA_ENABLED=true
      - ALERT_WEBHOOK_URL=${ALERT_WEBHOOK_URL}
      - LOG_LEVEL=info
      - SERVICE_NAME=monitoring-service
    volumes:
      - ./shared/config:/app/config:ro
      - ./shared/event-schemas:/app/schemas:ro
      - monitoring_logs:/app/logs
      - monitoring_data:/app/data
    ports:
      - "8004:8000"  # Monitoring API
      - "9090:9090"  # Prometheus
      - "3001:3001"  # Grafana
    depends_on:
      postgres:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - aktienanalyse-network

  # ===============================================================================
  # Development & Utility Services
  # ===============================================================================

  # Redis Commander (Redis GUI for development)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    environment:
      - REDIS_HOSTS=master:redis-master:6379,slave1:redis-slave1:6380,slave2:redis-slave2:6381
    ports:
      - "8081:8081"
    depends_on:
      - redis-master
    restart: unless-stopped
    networks:
      - aktienanalyse-network
    profiles:
      - development

  # pgAdmin (PostgreSQL GUI for development)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@aktienanalyse.local
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "8080:80"
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - aktienanalyse-network
    profiles:
      - development

  # ===============================================================================
  # Load Balancer & Reverse Proxy
  # ===============================================================================

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: aktienanalyse-nginx
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend-service
      - intelligent-core-service
      - broker-gateway-service
      - event-bus-service
      - monitoring-service
    restart: unless-stopped
    networks:
      - aktienanalyse-network
    profiles:
      - production

# ===============================================================================
# Volumes (Persistent Data)
# ===============================================================================

volumes:
  # Database volumes
  postgres_data:
    driver: local
    name: aktienanalyse_postgres_data
  
  # Redis volumes
  redis_master_data:
    driver: local
    name: aktienanalyse_redis_master_data
  redis_slave1_data:
    driver: local
    name: aktienanalyse_redis_slave1_data
  redis_slave2_data:
    driver: local
    name: aktienanalyse_redis_slave2_data
  
  # Service log volumes
  intelligent_core_logs:
    driver: local
    name: intelligent_core_logs
  broker_gateway_logs:
    driver: local
    name: broker_gateway_logs
  event_bus_logs:
    driver: local
    name: event_bus_logs
  frontend_logs:
    driver: local
    name: frontend_logs
  monitoring_logs:
    driver: local
    name: monitoring_logs
  nginx_logs:
    driver: local
    name: nginx_logs
  
  # Application data volumes
  monitoring_data:
    driver: local
    name: monitoring_data
  pgadmin_data:
    driver: local
    name: pgadmin_data

# ===============================================================================
# Networks
# ===============================================================================

networks:
  aktienanalyse-network:
    driver: bridge
    name: aktienanalyse-network
    ipam:
      config:
        - subnet: 172.20.0.0/16